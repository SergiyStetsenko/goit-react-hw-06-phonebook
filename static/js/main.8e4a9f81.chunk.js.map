{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Notification/Notification.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsReducer.js","redux/store.js","components/Notification/Notification.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App/App.js","index.js"],"names":["module","exports","addContact","createAction","contact","payload","contacts","removeContact","filterContact","items","createReducer","contactsActions","state","action","filter","id","combineReducers","store","configureStore","reducer","contactsReducer","Notification","alert","delay","CSSTransition","in","classNames","styles","timeout","onEntered","unmountOnExit","className","notification","ContactForm","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","find","item","reset","uuidv4","this","setTimeout","onSubmit","type","placeholder","onChange","formButton","disabled","length","Component","mapDispatchToProps","connect","onRemove","toLowerCase","includes","TransitionGroup","component","map","contactsItem","contactsText","contactsButton","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e4a9f81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__3jhuv\",\"contactsItem\":\"ContactList_contactsItem__u9bVp\",\"contactsText\":\"ContactList_contactsText__2GbZW\",\"contactsButton\":\"ContactList_contactsButton__2qvq7\",\"enter\":\"ContactList_enter__2jpJJ\",\"enterActive\":\"ContactList_enterActive__3AmB0\",\"exit\":\"ContactList_exit__2SoqM\",\"exitActive\":\"ContactList_exitActive__1L1To\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__3LT43\",\"enter\":\"Notification_enter__2Jeug\",\"enterActive\":\"Notification_enterActive__3MEO8\",\"exit\":\"Notification_exit__1RKPg\",\"exitActive\":\"Notification_exitActive__xM6FW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__8fNVt\",\"formInput\":\"ContactForm_formInput__3jvMR\",\"formButton\":\"ContactForm_formButton__1klds\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__26nhu\"};","// import actionsTypes from './contactsActionsTypes';\nimport { createAction } from \"@reduxjs/toolkit\";\n\nconst addContact = createAction(\"contacts/add\", (contact) => ({\n  payload: {\n    contacts: contact,\n  },\n}));\nconst removeContact = createAction('contacts/remove');\nconst filterContact = createAction('contacts/filter');\n\n\nexport default {\n  addContact,\n  removeContact,\n  filterContact,\n};\n\n\n// BEFORE(without toolkit)\n// const addContact = (contact) => ({\n//   type: actionsTypes.ADD_CONTACT,\n//   payload: {\n//     contacts: contact,\n//   },\n// });\n\n// const removeContact = (id) => ({\n//   type: actionsTypes.REMOVE_CONTACT,\n//   payload: {\n//     id,\n//   },\n// });\n\n// const filterContact = (filter) => ({\n//   type: actionsTypes.FILTER_CONTACTS,\n//   payload: {\n//     filter,\n//   },\n// });\n\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport contactsActions from \"./contactsActions\";\n\nconst addContact = (state, action) => {\n  return [...state, action.payload.contacts];\n};\n\nconst removeContact = (state, action) => {\n  return state.filter((contact) => contact.id !== action.payload);\n};\n\nconst filterContact = (state, action) => {\n  return action.payload;\n};\nconst items = createReducer([], {\n  [contactsActions.addContact]: addContact,\n  [contactsActions.removeContact]: removeContact,\n});\n\nconst filter = createReducer(\"\", {\n  [contactsActions.filterContact]: filterContact,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case contactsActions.addContact.type:\n//       return [...state, payload.contacts];\n//     case contactsActions.removeContact.type:\n//       return state.filter((contact) => contact.id !== payload.id);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case contactsActions.filterContact.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n","// import { createStore, combineReducers } from \"redux\";\nimport { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contactsReducer';\n\n\n\n// BEFORE\n// const rootReducers = combineReducers({\n//     contacts: contactsReducer,\n// });\n// const store = createStore(\n//     rootReducers,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n\n\n// AFTER(toolkit)\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n});\n\n\nexport default store;\n","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport styles from \"./Notification.module.css\";\n\nconst Notification = ({ alert, delay }) => {\n  return (\n    <CSSTransition\n    in={alert}\n    classNames={styles}\n    timeout={1000}\n    onEntered={delay}\n    unmountOnExit\n    >\n      <div className={styles.notification}>\n        <p>Contact already exists!</p>\n      </div>\n    </CSSTransition>\n  );\n};\nexport default Notification;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Notification from \"../Notification/Notification.js\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts/contactsActions\";\nimport styles from \"./ContactForm.module.css\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    alert: false,\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, number, alert } = this.state;\n    const { items } = this.props.contacts;\n    const repeat = items.find((item) => item.name === name);\n    if (repeat) {\n      this.reset();\n      return this.setState({ alert: !alert });\n    }\n    const item  = {\n      id: uuidv4(),\n      name: name,\n      number: number,\n    };\n    this.props.addContact(item);\n    this.reset();\n  };\n  reset = () => {\n    this.setState({\n      name: \"\",\n      number: \"\",\n      alert: false,\n    });\n  };\n\n  render() {\n    const { name, number, alert } = this.state;\n    const delay = () => setTimeout(this.setState({ alert: !alert }), 1000);\n    return (\n      <>\n        <Notification alert={alert} delay={delay} />\n        \n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Name:\n              <input\n                type=\"text\"\n                value={name}\n                name=\"name\"\n                placeholder=\"enter the name...\"\n                onChange={this.handleChange}\n              />\n            </label>\n            <br />\n            <label>\n              Number:\n              <input\n                type=\"tel\"\n                value={number}\n                name=\"number\"\n                placeholder=\"enter the number...\"\n                onChange={this.handleChange}\n              />\n          </label>\n          <br/>\n            <button\n              className={styles.formButton}\n              type=\"submit\"\n              disabled={!name.length || !number.length}\n            >\n              Add contact\n            </button>\n          \n        </form>\n      </>\n    );\n  }\n}\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\nconst mapStateToProps = (state) => {\n  return state;\n};\nconst mapDispatchToProps = {\n  addContact: contactsActions.addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactList.module.css\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts/contactsActions\";\n\nconst ContactList = ({ items, onRemove }) => {\n  return (\n    <div className={styles.contacts}>\n      <TransitionGroup component=\"ul\">\n        {items.map(( item ) => (\n          <CSSTransition\n            key={item.id}\n            classNames={styles}\n            timeout={250}\n            unmountOnExit\n          >\n            <li className={styles.contactsItem}>\n              <p className={styles.contactsText}>\n                {item.name} : {item.number}\n              </p>\n\n              <button\n                className={styles.contactsButton}\n                type=\"button\"\n                onClick={() => onRemove(item.id)}\n              >\n                ×\n              </button>\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.exact({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      })\n    ),\n    PropTypes.array,\n  ]),\n  onRemove: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  const visibleContacts = state.contacts.items.filter((item) =>\n  item.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\n  );\n  return {\n    items: visibleContacts,\n  };\n};\n\nconst mapDispatchToProps = {\n  onRemove: contactsActions.removeContact,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts/contactsActions\";\n\nconst Filter = ({ onChange }) => {\n  return (\n    <div className={styles.filter}>\n      Find contacts by name:\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={(e) => onChange(e.target.value)}\n        id = \"filterInput\"\n      />\n    </div>\n  );\n};\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = {\n  onChange: contactsActions.filterContact,\n};\nexport default connect(null, mapDispatchToProps)(Filter);\n","import React, { Component } from \"react\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport \"./GlobalStyles.css\";\nimport { connect } from \"react-redux\";\n class App extends Component { \n\n  render() {\n    const {items} = this.props.contacts;\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <ContactForm />\n        {items.length > 1 && <Filter />}\n         <h2 >Contacts</h2>\n         {items.length ?   \n            <ContactList />           \n           : (<p>There are no contacts here</p>\n          )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) =>{\n  return state;\n}\n\nexport default connect(mapStateToProps)(App);\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from './redux/store';\nimport App from \"./components/App/App.js\";\n\nReactDOM.render(\n  <Provider store ={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}